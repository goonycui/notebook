# Refer https://nodejs.org/api/tls.html

# To generate a 2048-bit RSA private key
openssl genrsa -out private.pem 2048


# To obtaining a certificate is to create a Certificate Signing Request (CSR) file
openssl req -new -sha256 -key private.pem -out csr.pem

# Once the CSR file is generated, it can either be sent to a Certificate Authority for signing or used to generate a self-signed certificate.
# Creating a self-signed certificate using the OpenSSL command-line interface is illustrated in the example below:
openssl x509 -req -in csr.pem -signkey private.pem -out cert.pem

# To list details of Certificate
openssl x509 -in cert.pem -text
# or for p12/pfx
openssl pkcs12 -nokeys -info -in ca-cert-p.p12


# To generate a .pfx or .p12 file:
openssl pkcs12 -export -out ca-cert-p.p12 -inkey ca-private.pem -in ca-cert.pem
# or add CA additionally
openssl pkcs12 -export -in cert.pem -inkey private.pem -certfile <Cert Authority cert file> -out bundle.pfx

# Generate trust store chain
# Run it multiple times to include all certs in the chain in order(put into same p12 file)
openssl pkcs12 -export -nokeys -in <cert file> -out ca-truststore.p12


# Export certificate from p12
openssl pkcs12 -in keystore.p12  -nokeys -out cert.pem
# Export unencrypted private key from p12
openssl pkcs12 -in keystore.p12  -nokeys -out cert.pem


# Simulate sign a Certificate Sign Request with my own self-signed CA private key (ext file can put SAN ... Other info to certificate)
openssl x509 -req -in 2nd-csr.csr -CA ../CA/ca-cert.pem -CAkey ../CA/ca-private.pem -CAcreateserial -out 2nd-cert.crt -days 30 -sha256 -extfile 2nd.ext



refer below link for Actual CA -
https://deliciousbrains.com/ssl-certificate-authority-for-local-https-development/

